;; (c) 2015 Andreas Rossberg

(module
  ;; Swap
  (func $swap (param i32 i32) (result i32 i32)
    (return (getlocal 1) (getlocal 0))
  )

  ;; Test
  (func $test (param $case i32) (result i32 i32)
    (local $x1 i32)
    (local $x2 i32)
    (setlocal $x1 (const.i32 1))
    (setlocal $x2 (const.i32 2))
    (switch.i32 (getlocal $case)
      ;; Destructure
      (case 1
        (destruct $x1 $x2 (call $swap (getlocal $x1) (getlocal $x2)))
        (return (getlocal $x1) (getlocal $x2))
      )
      ;; Return directly
      (case 2
        (return (call $swap (getlocal $x1) (getlocal $x2)))
      )
      ;; Pass on to other call
      (case 3
        (return (call $swap (call $swap (getlocal $x1) (getlocal $x2))))
      )
      ;; Break
      (case 4
        (destruct $x1 $x2
          (label $l (call $swap (break $l (getlocal $x1) (getlocal $x2))))
        )
        (return (getlocal $x1) (getlocal $x2))
      )
      ;; Pass on to break
      (case 5
        (return
          (label $l
            (call $swap (break $l (call $swap (getlocal $x1) (getlocal $x2))))
          )
        )
      )
      ;; Pass through block
      (case 6
        (return
          (block
            (setlocal $x2 (const.i32 3))
            (call $swap (getlocal $x1) (getlocal $x2))
          )
        )
      )
      ;; Pass through conditional
      (case 7)
      (case 8
        (return
          (if (eq.i32 (mods.i32 (getlocal $case) (const.i32 2)) (const.i32 0))
            (call $swap (getlocal $x1) (getlocal $x2))
            (call $swap (getlocal $x2) (getlocal $x1))
          )
        )
      )
      ;; Pass through switch
      (case 9)
      (case 10)
      (case 11
        (return
          (switch.i32 (getlocal $case)
            (case 9 (call $swap (getlocal $x1) (getlocal $x2)))
            (case 10 (call $swap (getlocal $x2) (getlocal $x1)))
            (label $l (break $l (getlocal $x1) (getlocal $x1)))
          )
        )
      )
      ;; Dummy default
      (return (getlocal $x1) (getlocal $x2))
    )
  )

  (export "test" $test)
)

(asserteq (invoke "test" (const.i32 1)) (const.i32 2) (const.i32 1)) 
(asserteq (invoke "test" (const.i32 2)) (const.i32 2) (const.i32 1))
(asserteq (invoke "test" (const.i32 3)) (const.i32 1) (const.i32 2))
(asserteq (invoke "test" (const.i32 4)) (const.i32 1) (const.i32 2))
(asserteq (invoke "test" (const.i32 5)) (const.i32 2) (const.i32 1))
(asserteq (invoke "test" (const.i32 6)) (const.i32 3) (const.i32 1))
(asserteq (invoke "test" (const.i32 7)) (const.i32 1) (const.i32 2))
(asserteq (invoke "test" (const.i32 8)) (const.i32 2) (const.i32 1))
(asserteq (invoke "test" (const.i32 9)) (const.i32 2) (const.i32 1))
(asserteq (invoke "test" (const.i32 10)) (const.i32 1) (const.i32 2))
(asserteq (invoke "test" (const.i32 11)) (const.i32 1) (const.i32 1))
